//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	// Code error code
	Code int `json:"code"`

	// Message error message
	Message string `json:"message"`
}

// Event defines model for Event.
type Event struct {
	Description *string `json:"Description,omitempty"`

	// ID event id
	ID        string    `json:"ID"`
	Reminder  *string   `json:"Reminder,omitempty"`
	StartTime time.Time `json:"StartTime"`
	StopTime  time.Time `json:"StopTime"`
	Title     string    `json:"Title"`
	UserID    int64     `json:"UserID"`
}

// EventID defines model for EventID.
type EventID struct {
	// ID event id
	ID string `json:"ID"`
}

// NewEvent defines model for NewEvent.
type NewEvent struct {
	Description *string   `json:"Description,omitempty"`
	Reminder    *string   `json:"Reminder,omitempty"`
	StartTime   time.Time `json:"StartTime"`
	StopTime    time.Time `json:"StopTime"`
	Title       string    `json:"Title"`
	UserID      int64     `json:"UserID"`
}

// FindEventsParams defines parameters for FindEvents.
type FindEventsParams struct {
	// StartTime events start time
	StartTime time.Time `form:"startTime" json:"startTime"`

	// Period period from startTime - day, week, month
	Period *string `form:"period,omitempty" json:"period,omitempty"`
}

// CreateEventJSONRequestBody defines body for CreateEvent for application/json ContentType.
type CreateEventJSONRequestBody = NewEvent

// UpdateEventByIDJSONRequestBody defines body for UpdateEventByID for application/json ContentType.
type UpdateEventByIDJSONRequestBody = Event

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all events
	// (GET /events)
	FindEvents(w http.ResponseWriter, r *http.Request, params FindEventsParams)
	// Create new event
	// (POST /events)
	CreateEvent(w http.ResponseWriter, r *http.Request)
	// Delete event by ID
	// (DELETE /events/{id})
	DeleteEventByID(w http.ResponseWriter, r *http.Request, id string)
	// Get event by ID
	// (GET /events/{id})
	FindEventByID(w http.ResponseWriter, r *http.Request, id string)
	// Update event by ID
	// (PUT /events/{id})
	UpdateEventByID(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FindEvents operation middleware
func (siw *ServerInterfaceWrapper) FindEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindEventsParams

	// ------------- Required query parameter "startTime" -------------

	if paramValue := r.URL.Query().Get("startTime"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "startTime"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startTime", r.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startTime", Err: err})
		return
	}

	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", r.URL.Query(), &params.Period)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "period", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindEvents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateEvent operation middleware
func (siw *ServerInterfaceWrapper) CreateEvent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEvent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEventByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteEventByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEventByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindEventByID operation middleware
func (siw *ServerInterfaceWrapper) FindEventByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindEventByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateEventByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateEventByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateEventByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/events", wrapper.FindEvents)
	m.HandleFunc("POST "+options.BaseURL+"/events", wrapper.CreateEvent)
	m.HandleFunc("DELETE "+options.BaseURL+"/events/{id}", wrapper.DeleteEventByID)
	m.HandleFunc("GET "+options.BaseURL+"/events/{id}", wrapper.FindEventByID)
	m.HandleFunc("PUT "+options.BaseURL+"/events/{id}", wrapper.UpdateEventByID)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVXXPaOhD9K5q991EEQ4B7r99uAu3wknba5CmTBwUtoNaWFEkk8TD+7x1JBvNhApmm",
	"0/TJHmnXe86e3eMlTFSulUTpLKRLsJM55iy8joxRxr9oozQaJzAcTxRH/+RoJ0ZoJ5SEFNAHk3BHwRUa",
	"IQUhHc7QQEkhR2vZ7GDe6nqdap0RcgZlScHgw0IY5JDeQvX9VfhdSWH0iNL577Is+zSF9HYJfxucQgp/",
	"tWtq7YpX+wqfYkZJXw4MUeMhlOsi4+F+M+LZDiUfTAQHCvjMcp15Qp3uOfb6g39a+O9/961Ol5+3WK8/",
	"aPW6g0G/3+slSZIcpT8eBsprDntwhptAlhvlr+fCEmEJIxKfSEC4X43CF8yF5BhUnyqTMwcpaDRC8abw",
	"r44Zdy1y3IrnzGHL+dPGFKVfl3EtXIbbbK5e4nBj0URZ1gkdWtcS0g16DTO60+pYdZPiBvZ1kbvS5wk5",
	"Vb6ei0jhkmUoOTPk/89jYtE8ogEKj2hsHJDOWXKWeKhKo2RaQArn4YiCZm4elGwHfuF1hkFprzPzyo45",
	"pPBBSD6KIT7LsBwdGhvmv2EcLbGeCKmaLPzFwwJNARQky2MHa6Z1J5xZIK1c4VTN/GptY4gjRKZG5WRd",
	"h7QIZwUlT4jfKcmVdPMD0NYTWOPYLXnnQVutpI2b0E2SaFbSrfxB60xMQgfb32xckPp7wmEeEo96gheu",
	"qs6MYQWEGWjs+QoRhIApW2TuVaBexBLcuaH2jcRnjROHnGAVQ8Eu8pyZAlL4iI6wLCPVfJUUtLINA3Zp",
	"kDkcVVvmBwKtu1C8eDMGtRVvL58fufIn5TzJ2Q/o9i5li3JsuLe/rkyivRS8jP+hDB3uazkM54H3RTEe",
	"nuQY8QcWttGbUr2M4fywQRxfzN6hX2aEz99T22PnYsvJfUH82NAjjnx6i0Pcr2jxGy/Ln7Uq3uF2BNOL",
	"BsFuNGe/dSve3lJf4acHt3AR2vKutjAqtS1qWZY/AgAA//9jvCHivAwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
